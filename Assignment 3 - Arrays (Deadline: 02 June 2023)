q1:

nums = [-1,2,1,-4]
target = 1
def threesum(nums , target) :
        nums.sort()
        c=99999999999999
        for i in range(0,len(nums)-2):
            
            x=i+1
            y=len(nums)-1
            while(x<y):
                csum=nums[i]+nums[x]+nums[y]
                if(csum==target): return target
                elif(abs(target-csum)<abs(target-c)): c=csum
                if(csum<=target): x=x+1
                else:y=y-1
        return c
        
print(threesum(nums,target))




q2:
nums = [1,0,-1,0,-2,2]
target = 0
def fourSum(nums,target) :

        nums.sort()
        c=999999999
        lt=set()
        for i in range(len(nums)-3):
            for j in range(i+1,len(nums)-2):
                r=j+1
                z=len(nums)-1
                while(r<z):
                    csum=nums[i]+nums[j]+nums[r]+nums[z]
                    if(csum==target): 
                        ##ss=[nums[i],nums[j],nums[r],nums[z]]
                        lt.add((nums[i],nums[j],nums[r],nums[z]))
                        #print(lt)
                        r=r+1
                        z=z-1
                    elif(csum<target): r=r+1
                    else:z=z-1
        return lt


        
print(fourSum(nums,target))
-----------------------------------------------------------------------------------------------------------------------------
Q3:




----------------------------------------------------------------------------------------------------------------------------

Q4:
nums = [1,3,5,6]

target = 5

def searchInsert(nums, target):

        x=0
        y=len(nums)-1

        while(x<=y):
        
            m=(x+y)//2

            if(nums[m]==target):
                return m
            elif(nums[m]>target): 
                y=m-1
            else : x=m+1


        

        return x
        
        
print(searchInsert(nums,target))







----------------------------------------------------------------------------------------------------------------------------
Q5:

nums = [1,2,3]



def plusOne(digits) :

        d=digits
        l=len(d)
        x=0
        for i in range(l):
             x=x*10+d[i]

        x=x+1

        r=[]
        while(x!=0):
            r.insert(0,x%10)
            x=x//10
        return r
        
        
print(plusOne(nums))


-----------------------------------------------------------------------------------------------------------------------------------
Q6:
nums = [2,2,1]



def singleNumber(nums) :
        dist={}

        for i in nums:
            dist[i]=dist.get(i,0)+1

        for i in dist.keys():
            if(dist[i]==1): return i
            
print(singleNumber(nums))


Q7:



Q8:
intervals = [[0,30],[30,40],[40,200]]


l=sorted(intervals,key=lambda x:x[0])


def func(l):
    for i in range(len(l)-1):
        if(l[i][1]>l[i+1][0]): return False
    return True


print(func(l))
