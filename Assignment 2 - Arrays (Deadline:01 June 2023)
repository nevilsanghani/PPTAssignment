
Q1:
nums = [1,4,3,2]
def arrPair(nums) -> int:
        nums.sort()
        sum=0
        for i in range(0,len(nums),2):
            sum=sum+nums[i]

        return sum
        

print(arrPair(nums))


------------------------------------------------------------------------------------------------------------------------------------------------

Q2:



candyType = [1,1,2,2,3,3]
def func( candyType) :
        l= len(set(candyType))
        if(l>len(candyType)/2): return len(candyType)//2
        else: return l

print(func(candyType))


------------------------------------------------------------------------------------------------------------------------------------------------


q3:

nums=[1,3,2,2,5,2,3,7]
def findLHS(nums) :

        dt={}
        mx=0
        for i in nums:
            dt[i]=dt.get(i,0)+1

        for i in set(nums):
            if(i+1 in dt.keys()):
                mx=max(mx,dt[i]+dt[i+1])
        return mx
        
        
print(findLHS(nums))


----------------------------------------------------------------------------------------------------------------------------------------------------
Q4:


flower=[1,0,0,0,1]
n=1
def canPlaceFlowers( flower,n) :

        i=flower[0]
        
        for i in range(0,len(flower)-2):
            if(i==0 and flower[i+1]==0 and flower[i]==0):
                flower[i]=2
            elif(flower[i]==0 and flower[i-1]==0 and flower[i+1]==0):
                flower[i]=2

        if(flower[len(flower)-1]==0 and flower[len(flower)-2]==0):
            flower[len(flower)-1]=2
        sum=0
        for i in flower:
            if(i==2):
                sum=sum+1
                
        if(sum>=n): return True
        else: return False
        
print(canPlaceFlowers(flower,n))

----------------------------------------------------------------------------------------------------------------------------------------------------

Q5:






----------------------------------------------------------------------------------------------------------------------------------------------------


Q6:
nums=[-1,0,3,5,9,12] 
target = 9


def bsearch(nums ,target) -> int:
        l=0
        r=len(nums)-1

        while(l<=r):
        
            m=(l+r)//2

            if(nums[m]==target):
                return m
            elif(nums[m]>target):
                r=m-1
            else: l=m+1

        

        return -1
        
        
print(bsearch(nums,target))


----------------------------------------------------------------------------------------------------------------------------------------------------
q7;

nums = [1,2,2,3]

def isMonotonic(nums):
        if(nums[0]>=nums[len(nums)-1]):
            for i in range(len(nums)-1):
                if(nums[i]<nums[i+1]):
                    return False
        else:
            
            for i in range(len(nums)-1):
                if(nums[i]>nums[i+1]):
                    return False
        
        return True
        
        
print(isMonotonic(nums))


----------------------------------------------------------------------------------------------------------------------------------------------------

q8:

nums = [1]
k = 0

def func( nums,k) -> int:

        mn=min(nums)
        mx=max(nums)

        if(mx-mn > 2*k): return mx-mn-2*k
        
        return 0
        
print(func(nums,k))
